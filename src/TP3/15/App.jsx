/*
Utilizando a ferramenta CodeSandbox e o template React, implemente uma aplica√ß√£o que apresente para o usu√°rio, um item por vez, de uma rela√ß√£o de itens, por exemplo: t√≠tulos de filmes, t√≠tulos de m√∫sicas, t√≠tulos de jogos.

Para cada um dos itens, o usu√°rio dever√° informar se gosta ou n√£o gosta do que lhe foi apresentado.

No momento em que ele desejar, ele pode ir para outra interface em que lhe ser√° apresentado uma rela√ß√£o de outros usu√°rios que tenham gostos parecidos com os seus, ou seja, que gostam e n√£o das mesmas coisas e ele. Esta rela√ß√£o deve estar organizada por n√≠vel de afinidade. 

Use a t√©cnica que desejar para calcular o n√≠vel de afinidade. 
Use o layout que achar melhor!
A aplica√ß√£o deve estar componentizada.
Implemente estilos diferentes para o esquema de cores light e dark.
Pense Mobile-first!
*/

import { useState } from "react";

const MOVIES = [
  "Matrix",
  "O Poderoso Chef√£o",
  "O Senhor dos An√©is",
  "Star Wars",
  "Titanic",
  "Avatar",
  "O Rei Le√£o",
  "Harry Potter",
  "Jurassic Park",
  "Indiana Jones",
];

export default function App() {
  return <MovieList />;
}

function MovieList() {
  const [currentMovie, setCurrentMovie] = useState(0);
  const [myList, setMyList] = useState([]);
  const [showCompatibility, setShowCompatibility] = useState(false);

  function handleChoice(movie, liked) {
    if (liked) {
      setMyList((prev) => [...prev, movie]);
    }
    if (currentMovie < MOVIES.length) {
      setCurrentMovie((prev) => prev + 1);
    }
  }
  console.log({
    currentMovie,
    length: MOVIES.length,
  });

  return (
    <div>
      {showCompatibility ? (
        <CompatibilityList myList={myList} />
      ) : (
        <div>
          <ul>
            {MOVIES.map((movie) => (
              <MovieItem
                key={movie}
                movie={movie}
                handleChoice={handleChoice}
              />
            ))}
          </ul>

          <button
            disabled={currentMovie < MOVIES.length}
            onClick={() => setShowCompatibility(true)}
          >
            Ver usu√°rios com gostos parecidos
          </button>
        </div>
      )}
    </div>
  );
}

function MovieItem({ movie, handleChoice }) {
  const [choice, setChoice] = useState(null);

  function onChoice(choice) {
    setChoice(choice);
    handleChoice(movie, choice);
  }

  const isDisabled = choice !== null;

  return (
    <li>
      <h2>{movie}</h2>
      <button disabled={isDisabled} onClick={() => onChoice(true)}>
        üëç
      </button>
      <button disabled={isDisabled} onClick={() => onChoice(false)}>
        üëé
      </button>
    </li>
  );
}

const USERS = [
  {
    name: "Jo√£o",
    liked: ["Matrix", "O Poderoso Chef√£o", "O Senhor dos An√©is"],
  },
  {
    name: "Maria",
    liked: ["O Poderoso Chef√£o", "O Rei Le√£o", "Harry Potter"],
  },
  {
    name: "Jos√©",
    liked: ["Star Wars", "Titanic", "Avatar"],
  },
];

function CompatibilityList({ myList }) {
  const sortedUsers = USERS.sort((a, b) => {
    const aLiked = a.liked.filter((movie) => myList.includes(movie));
    const bLiked = b.liked.filter((movie) => myList.includes(movie));

    return bLiked.length - aLiked.length;
  });

  return (
    <ul>
      {sortedUsers.map((user) => (
        <li key={user.name}>
          <h2>{user.name}</h2>
          <div>
            Voc√™s tem
            {user.liked.filter((movie) => myList.includes(movie)).length} gostos
            em comum
          </div>
        </li>
      ))}
    </ul>
  );
}
